#include <SoftwareSerial.h>

SoftwareSerial bluetooth(0, 1);
int rows[] = {13, 12, 11, 10, 9, 8, 7, 6};
int columns[] = {A5, A4, A3, A2, A1, 3, 4, 5};
String message = "";

byte characters[][5] = {
{B00000000, B00000000, B00000000, B00000000, B00000000}, // space
{B01011111, B00000000, B00000000, B00000000, B00000000}, // !
{B00000011, B00000000, B00000011, B00000000, B00000000}, // "
{B00010100, B00111110, B00010100, B00111110, B00010100}, // #
{B00100100, B01101010, B00101011, B00010010, B00000000}, // $
{B01100011, B00010011, B00001000, B01100100, B01100011}, // %
{B00110110, B01001001, B01010110, B00100000, B01010000}, // &
{B00000011, B00000000, B00000000, B00000000, B00000000}, // '
{B00011100, B00100010, B01000001, B00000000, B00000000}, // (
{B01000001, B00100010, B00011100, B00000000, B00000000}, // )
{B00101000, B00011000, B00001110, B00011000, B00101000}, // *
{B00001000, B00001000, B00111110, B00001000, B00001000}, // +
{B10110000, B01110000, B00000000, B00000000, B00000000}, // ,
{B00001000, B00001000, B00001000, B00001000, B00000000}, // -
{B01100000, B01100000, B00000000, B00000000, B00000000}, // .
{B01100000, B00011000, B00000110, B00000001, B00000000}, // /
{B00111110, B01000001, B01000001, B00111110, B00000000}, // 0
{B01000010, B01111111, B01000000, B00000000, B00000000}, // 1
{B01100010, B01010001, B01001001, B01000110, B00000000}, // 2
{B00100010, B01000001, B01001001, B00110110, B00000000}, // 3
{B00011000, B00010100, B00010010, B01111111, B00000000}, // 4
{B00100111, B01000101, B01000101, B00111001, B00000000}, // 5
{B00111110, B01001001, B01001001, B00110000, B00000000}, // 6
{B01100001, B00010001, B00001001, B00000111, B00000000}, // 7
{B00110110, B01001001, B01001001, B00110110, B00000000}, // 8
{B00000110, B01001001, B01001001, B00111110, B00000000}, // 9
{B01010000, B00000000, B00000000, B00000000, B00000000}, // :
{B10000000, B01010000, B00000000, B00000000, B00000000}, // ;
{B00010000, B00101000, B01000100, B00000000, B00000000}, // <
{B00010100, B00010100, B00010100, B00000000, B00000000}, // =
{B01000100, B00101000, B00010000, B00000000, B00000000}, // >
{B00000010, B01011001, B00001001, B00000110, B00000000}, // ?
{B00111110, B01001001, B01010101, B01011101, B00001110}, // @
{B01111110, B00010001, B00010001, B01111110, B00000000}, // A
{B01111111, B01001001, B01001001, B00110110, B00000000}, // B
{B00111110, B01000001, B01000001, B00100010, B00000000}, // C
{B01111111, B01000001, B01000001, B00111110, B00000000}, // D
{B01111111, B01001001, B01001001, B01000001, B00000000}, // E
{B01111111, B00001001, B00001001, B00000001, B00000000}, // F
{B00111110, B01000001, B01001001, B01111010, B00000000}, // G
{B01111111, B00001000, B00001000, B01111111, B00000000}, // H
{B01000001, B01111111, B01000001, B00000000, B00000000}, // I
{B00110000, B01000000, B01000001, B00111111, B00000000}, // J
{B01111111, B00001000, B00010100, B01100011, B00000000}, // K
{B01111111, B01000000, B01000000, B01000000, B00000000}, // L
{B01111111, B00000010, B00001100, B00000010, B01111111}, // M
{B01111111, B00000100, B00001000, B00010000, B01111111}, // N
{B00111110, B01000001, B01000001, B00111110, B00000000}, // O
{B01111111, B00001001, B00001001, B00000110, B00000000}, // P
{B00111110, B01000001, B01000001, B10111110, B00000000}, // Q
{B01111111, B00001001, B00001001, B01110110, B00000000}, // R
{B01000110, B01001001, B01001001, B00110010, B00000000}, // S
{B00000001, B00000001, B01111111, B00000001, B00000001}, // T
{B00111111, B01000000, B01000000, B00111111, B00000000}, // U
{B00001111, B00110000, B01000000, B00110000, B00001111}, // V
{B00111111, B01000000, B00111000, B01000000, B00111111}, // W
{B01100011, B00010100, B00001000, B00010100, B01100011}, // X
{B00000111, B00001000, B01110000, B00001000, B00000111}, // Y
{B01100001, B01010001, B01001001, B01000111, B00000000}, // Z
{B01111111, B01000001, B00000000, B00000000, B00000000}, // [
{B00000001, B00000110, B00011000, B01100000, B00000000}, // \ backslash
{B01000001, B01111111, B00000000, B00000000, B00000000}, // ]
{B00000010, B00000001, B00000010, B00000000, B00000000}, // hat
{B01000000, B01000000, B01000000, B01000000, B00000000}, // _
{B00000001, B00000010, B00000000, B00000000, B00000000}, // `
{B00100000, B01010100, B01010100, B01111000, B00000000}, // a
{B01111111, B01000100, B01000100, B00111000, B00000000}, // b
{B00111000, B01000100, B01000100, B00101000, B00000000}, // c
{B00111000, B01000100, B01000100, B01111111, B00000000}, // d
{B00111000, B01010100, B01010100, B00011000, B00000000}, // e
{B00000100, B01111110, B00000101, B00000000, B00000000}, // f
{B10011000, B10100100, B10100100, B01111000, B00000000}, // g
{B01111111, B00000100, B00000100, B01111000, B00000000}, // h
{B01000100, B01111101, B01000000, B00000000, B00000000}, // i
{B01000000, B10000000, B10000100, B01111101, B00000000}, // j
{B01111111, B00010000, B00101000, B01000100, B00000000}, // k
{B01000001, B01111111, B01000000, B00000000, B00000000}, // l
{B01111100, B00000100, B01111100, B00000100, B01111000}, // m
{B01111100, B00000100, B00000100, B01111000, B00000000}, // n
{B00111000, B01000100, B01000100, B00111000, B00000000}, // o
{B11111100, B00100100, B00100100, B00011000, B00000000}, // p
{B00011000, B00100100, B00100100, B11111100, B00000000}, // q
{B01111100, B00001000, B00000100, B00000100, B00000000}, // r
{B01001000, B01010100, B01010100, B00100100, B00000000}, // s
{B00000100, B00111111, B01000100, B00000000, B00000000}, // t
{B00111100, B01000000, B01000000, B01111100, B00000000}, // u
{B00011100, B00100000, B01000000, B00100000, B00011100}, // v
{B00111100, B01000000, B00111100, B01000000, B00111100}, // w
{B01000100, B00101000, B00010000, B00101000, B01000100}, // x
{B10011100, B10100000, B10100000, B01111100, B00000000}, // y
{B01100100, B01010100, B01001100, B00000000, B00000000}, // z
{B00001000, B00110110, B01000001, B00000000, B00000000}, // {
{B01111111, B00000000, B00000000, B00000000, B00000000}, // |
{B01000001, B00110110, B00001000, B00000000, B00000000}, // }
{B00001000, B00000100, B00001000, B00000100, B00000000}, // ~
};

void setup() {
  for (byte i = 3; i <= 13; i++)
      pinMode(i, OUTPUT);
  pinMode(A1, OUTPUT);
  pinMode(A2, OUTPUT);
  pinMode(A3, OUTPUT);
  pinMode(A4, OUTPUT);
  pinMode(A5, OUTPUT);
  Serial.begin(9600);
  bluetooth.begin(9600);
}

void loop() {
  if (bluetooth.available()) {
    char c = bluetooth.read();
    if(String(c) == "~"){
      displayText(message);
      message = "";
    }else{
      message += String(c);
    }
    Serial.write(c);
  }
}

void displayText(String message) {
  Serial.print("MSG:   ");
  Serial.print(message);
  Serial.print(" | ");
  //for (int i = 0; i < message.length(); i++) {
    //char character = message.charAt(i);
    //displayChar(characters[character - 'A']);
    //delay(100);
  //}  
}

void displayChar(byte data[]) {
  for (int i = 0; i < 7; i++) {
    digitalWrite(rows[i], bitRead(data[i], 7 - i));
  }
  // delayMicroseconds(500);
  delay(1);
  for (int i = 0; i < 8; i++) {
    digitalWrite(columns[i], LOW);
  }
  // delayMicroseconds(500);
  delay(1);
  for (int i = 0; i < 8; i++) {
    digitalWrite(columns[i], HIGH);
  }
}
